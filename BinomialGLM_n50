library(parallel)
library(FNN)
#Binomial GLM n=50

#beta âˆ¼ U(-3,3)^p 
#f(y|beta)=  Binomial(y | logit^{-1}(X * Beta))  

#number of observations
n=50
#number of predictors
p=3

#proposal
priorsim<- function (x){
  par=runif(p,-3,3)
  return(par)
}

# data generating mechanism
datasim<- function(param=NULL, n=n, X=X){ 
  pi=plogis(X%*%param)
  y=rbinom(n,size = 1,prob=pi)
  return(y)
}

# summary statistics
stat<- function(y,X=X){
  return(c(y%*%X))
}

# observed data
set.seed(901)
param=seq(-0.25,0.25, length=p)
X=matrix(runif(n*p,-1,1),ncol=p, nrow = n)
yobs=datasim(param,n=n, X=X)

# esimated model
thetahat=glm(yobs~.-1, data=as.data.frame(X),family = binomial())
thetahat$coefficients

# observed summary statistics 
stat(yobs,X)



# yobs observed data
# R = number of proposals
# S = number of paired hyper rectangle bounds
# n = sample size
# X = model matrix
box <- function(yobs, R = 1000, S=2, n = 10, X=X) {
  # Parallelize parameter simulation
  cl <- makeCluster(detectCores() - 1)
  clusterExport(cl, c("priorsim", "datasim","stat", "p", "n",  "X",  "yobs"))
  
  #generate all parameters
  params <- parLapply(cl, seq_len(R), function(i) priorsim(x))
  params <- do.call(cbind, params)
  
  # Parallelize data simulation and flag computation
  results <- parLapply(cl, seq_len(R), function(i) {
  param <- (params[,i])
  #data
  YSIM=lapply( 1:S,  function (x) datasim(param = param, n = n ,X=X))
  #summary statistics
  TSIM=  sapply( 1:S,  function (x) stat(YSIM[[x]] ,X=X))
  #sort component-wise all summary statistics
  T_sorted <- apply(TSIM, 1, sort )#, L7,L8,L9,L10,L11,L12 )
  #min and max
  T1_sorted=T_sorted[1,]
  T2_sorted=T_sorted[S,]
  #observed summary statistics
  Tobs <- stat(yobs, X)
  flag <- 0
  if (all(T2_sorted > Tobs)) flag <- 0.5
  if (all(T1_sorted < Tobs)) flag <- flag + 0.5
  # flag==1 if accepted  
  list(param = param, flag = flag)
  })
  
  stopCluster(cl)
  
  # Extract parameters and flags
  params <- do.call(cbind, lapply(results, `[[`, "param"))
  flags <- sapply(results, `[[`, "flag")
  return(list(params = params, flags = flags))
}

# one Box-CD estimation
RES=box(yobs, R = 500000,S=2,n=n, X=X)
#number of accepted parameters

sum(RES$flags==1)

par(mfrow=c(3,2))
for (i in 1:p) {
  plot(density(RES$params[i,RES$flags==1]))
  abline(v=param[i])
  abline(v=thetahat$coefficients[i], col=2)
}
 

set.seed(333) 
count_n_interval95=0
count_n_interval90=0
count_n_interval85=0
count_n_interval80=0
nsim=2000
results_all=list(nsim)
isim=0
isim=isim+1
isim

for (isim in isim:nsim){
  set.seed(isim+99) 
  
  yobs=datasim(param,n=n, X=X)
  RES=box(yobs, R = 1000000,S=2,n=n, X=X)
  
  print(sum(RES$flags==1))
  
  #density estimation
  dens=kepdf(t(RES$params[,RES$flags==1]))
  dens@estimate=dens@estimate/max(dens@estimate)
  
  #prediction
  dat = data.frame((dens@x),y = dens@estimate)
  
  colnames(dat)=sapply(1:p, function (k) paste("V", k,sep = ""))
  colnames(dat)[p+1]="y"
  df=as.data.frame(matrix(param,ncol=p) )
  pred <- knn.reg(train = dat[,1:p], test = df, y  = dat$y, k = 1)
  pred=(pred$pred)
  
  par(mar=c(1.5,1.5,1.5,1.5))
  par(mfrow=c(4,2))
  
  #0.8
  alpha=0.2
  contained=(pred>(quantile(dens@estimate,alpha)   ))
  label=(dens@estimate>(quantile(dens@estimate,alpha) ))
  count_n_interval80=count_n_interval80+contained
  plot(dens@x[,1:2], col=5+label, main=contained, cex=0.1)
  points(col=2,param[1], param[2], cex=0.5, lwd=2)
  plot(dens@x[,c(1,3)], col=5+label, cex=0.1)
  points(col=2,param[1], param[3], cex=0.5, lwd=2)
  
  #0.85
  alpha=0.15
  contained=(pred>(quantile(dens@estimate,alpha)   ))
  label=(dens@estimate>(quantile(dens@estimate,alpha) ))
  count_n_interval85=count_n_interval85+contained
  plot(dens@x[,1:2], col=5+label, main=contained, cex=0.1)
  points(col=2,param[1], param[2], cex=0.5, lwd=2)
  plot(dens@x[,c(1,3)], col=5+label, cex=0.1)
  points(col=2,param[1], param[3], cex=0.5, lwd=2)
  
  #interval 90%
  alpha=0.1 
  contained=(pred>(quantile(dens@estimate,alpha)   ))
  label=(dens@estimate>(quantile(dens@estimate,alpha) ))
  count_n_interval90=count_n_interval90+contained
  plot(dens@x[,1:2], col=5+label, main=contained, cex=0.1)
  points(col=2,param[1], param[2], cex=0.5, lwd=2)
  plot(dens@x[,c(1,3)], col=5+label, cex=0.1)
  points(col=2,param[1], param[3], cex=0.5, lwd=2)
  
  #interval 95%
  alpha=0.05
  contained=(pred>(quantile(dens@estimate,alpha)   ))
  label=(dens@estimate>(quantile(dens@estimate,alpha) ))
  plot(dens@x[,1:2], col=5+label, main=contained, cex=0.1)
  points(col=2,param[1], param[2], cex=0.5, lwd=2)
  plot(dens@x[,c(1,3)], col=5+label, cex=0.1)
  points(col=2,param[1], param[3], cex=0.5, lwd=2)
  count_n_interval95=count_n_interval95+contained
 
  cat("\n");
  
  cat(isim);print(" sim");
  cat(count_n_interval95/isim); cat(" ");
  cat(count_n_interval90/isim); cat(" ");
  cat(count_n_interval85/isim); cat(" ");
  cat(count_n_interval80/isim)
}


set.seed(333) 
count_n_interval95=0
count_n_interval90=0
count_n_interval85=0
count_n_interval80=0
nsim=50000
results_all=list(nsim)
isim=0
isim=isim+1
isim

n=50
for (isim in isim:nsim){
  set.seed(isim+99) 
  
  
  yobs=datasim(param,n=n, X=X[1:n,])
  fit=glm(yobs~.-1, data=as.data.frame(X[1:n,]),family = binomial())
  ll=logLik(fit)[1]
  pi=plogis(X[1:n,]%*%param)
  ll0=sum(dbinom(yobs, size=1, pi, log=T))
  
  pval=pchisq(2*(ll-ll0), df=3,lower.tail = F)
  count_n_interval95=count_n_interval95+as.numeric((1-pval)>0.95)
  count_n_interval90=count_n_interval90+as.numeric((1-pval)>0.90)
  count_n_interval85=count_n_interval85+as.numeric((1-pval)>0.85)
  count_n_interval80=count_n_interval80+as.numeric((1-pval)>0.80)
   
  
}


round(c(1-count_n_interval95/20000, 
        1-count_n_interval90/20000,
        1-count_n_interval85/20000,
        1-count_n_interval80/20000),3)

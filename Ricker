# BOX ABC 
# Ricker model


rm(list=ls())
require(mnormt)
require(mvtnorm)
 library(parallel)
#Ricker Model with 1 parameter and 5 summary statistics
####################?
priorsim<- function (x){
  runif(1,0.9,5)
}

datasim = function(N0,par,timestep = 20){
  theta = c(exp(par),10,.3^2)
  r      = theta[1]
  phi    = theta[2]
  sigma2 = theta[3]
  Nt = rep(N0,timestep)
  et = rep(0,timestep)
  Y = rep(NA,timestep)
  for(timer in 2:timestep){
    et[timer] = rnorm(n=1,0,sd = sqrt(sigma2))
    Nt[timer] =r*Nt[timer-1]*exp(-Nt[timer-1]+et[timer])
    Y[timer]  = rpois(n=1,phi*Nt[timer])
  }
  return(list(y=Y,x=1:timestep,Nt=Nt,et=et,theta=theta))
}

 
N0 = 2 
timestep = 20
set.seed(123)
yobs=datasim(N0=2,1 , timestep = 50)
p=1

#### Consider the synthetic likelihood, and some summaries, plot wrt r
stat<- function(output){
  #morethan10 = sum(output$y>10,na.rm=T)
  morethan10  = quantile(output$y,p=.25,na.rm=T)
  medi = median(output$y,na.rm=T)
  # max = max(output$y,na.rm=T) NO
  q3  = quantile(output$y,p=.75,na.rm=T)
  #meanover1 = mean(output$y[output$y>1],na.rm=T)
  outputsum = c(morethan10,medi,q3)#,

  names(outputsum) = c("morethan10","medi", "q3")
  return(outputsum)
}

TOBS=stat(yobs) 
TOBS
 

box <- function(yobs, R = 1000, S=8) {
  # Parallelize parameter simulation
  p=1
  N0=2
  cl <- makeCluster(detectCores() - 1)
  clusterExport(cl, c("priorsim", "datasim","stat",   "N0",   "yobs"))
  
  #generate all parameters
  params <- parLapply(cl, seq_len(R), function(i) priorsim(x))
  params <- do.call(cbind, params)
  dim(params)
  print(dim(params))
  
  
  # Parallelize data simulation and flag computation
  results <- parLapply(cl, seq_len(R), function(i) {
    param <- c(params[1,i])
    #data
    YSIM=lapply( 1:S,  function (x) datasim(N0 = N0, par = param, timestep = 50))
    #summary statistics
    TSIM=  sapply( 1:S,  function (x) stat(YSIM[[x]] ))
     
    #sort component-wise all summary statistics
    T_sorted <- apply(TSIM, 1, sort ) 
    #min and max
    T1_sorted=T_sorted[1,]
    T2_sorted=T_sorted[S,]
    #observed summary statistics
    Tobs <- stat(yobs)
    flag <- 0
    if (all(T2_sorted > Tobs)) flag <- 0.5
    if (all(T1_sorted < Tobs)) flag <- flag + 0.5
    # flag==1 if accepted  
    list(param = param, flag = flag)
  })
  
  stopCluster(cl)
  
  # Extract parameters and flags
  params <- do.call(cbind, lapply(results, `[[`, "param"))
  flags <- sapply(results, `[[`, "flag")
  return(list(params = params, flags = flags))
}

 
RES=box(yobs, R=50000,S=2)
print(sum(RES$flags==1)) 
plot(density(RES$params[RES$flags==1]))
priorsim
#############################################################################
#

priorsim
library(FNN)
# SIMULATION STUDY
priorsim<- function (x){
  runif(1,0.2, 2.5)
}
param= 1
set.seed(123456789) 
count_n_interval95=0
count_n_interval90=0
count_n_interval85=0
count_n_interval80=0
nsim=2000
results_all=list(nsim)
isim=0
isim=isim+1
isim

for(k in 1:1){
  R=50000
  cl <- makeCluster(detectCores() - 2)
  S=4
  p=1
  
  clusterExport(cl, c("priorsim", "datasim","stat", "p",  "N0","R", "S"))
  
  #generate all parameters
  params <- parLapply(cl, seq_len(R), function(i) priorsim(x))
  params <- do.call(cbind, params)
  clusterExport(cl, c("params"))
  
  #generate all data
  results <- parLapply(cl, seq_len(R), function(i) {
    param <- c(params[1,i])
    #data
    YSIM=lapply( 1:S,  function (x) datasim(N0 = N0,par = param,timestep = 50 ))
    #summary statistics
    TSIM=  sapply( 1:S,  function (x) stat(YSIM[[x]] ))
    #sort component-wise all summary statistics
    T_sorted <- apply(TSIM, 1, sort )#, L7,L8,L9,L10,L11,L12 )
    #min and max
    T1_sorted=T_sorted[1,]
    T2_sorted=T_sorted[S,]
    #observed summary statistics
    list(T1_sorted, T2_sorted)
  })
  clusterExport(cl, c("results"))
  for (isim in isim:nsim){
    gc()
    clusterExport(cl, c("isim"))
    set.seed(isim+77) 
    yobs=datasim(N0 = N0,par = 1,timestep = 50 )
    Tobs <- stat(yobs )
    rm(yobs)
    clusterExport(cl, c("Tobs"))
    results2 <- parLapply(cl, seq_len(R), function(i) {
      param <- c(params[1,i])
      flag <- 0
      if (all(unlist(results[[i ]][2])>= Tobs)) flag <- 0.5
      if (all(unlist(results[[i ]][1])<= Tobs)) flag <- flag + 0.5
      # flag==1 if accepted  
      list(param = param, flag = flag)
    })
    RES=list()
    RES$params=sapply(1:R, function (r) results2[[r]]$param)
    RES$flags=sapply(1:R, function (r) results2[[r]]$flag)
    print(sum(RES$flags==1))
    rm(results2)
    #density estimation
    dens=kepdf((RES$params[RES$flags==1]) )
    dens@estimate=dens@estimate/max(dens@estimate)
    
    #prediction
    dat = data.frame((dens@x),y = dens@estimate)
    p=1
    colnames(dat)=sapply(1:p, function (k) paste("V", k,sep = ""))
    colnames(dat)[p+1]="y"
    df=as.data.frame(matrix(1,ncol=p) )# 1 is the true parameter
    pred <- knn.reg(train = dat[,1:p], test = df, y  = dat$y, k = 1)$pred
    
    par(mar=c(1.5,1.5,1.5,1.5))
    par(mfrow=c(4,2))
    
    #0.8
    alpha=0.2
    contained=(pred>=(quantile(dens@estimate,alpha)   ))
    label=(dens@estimate>=(quantile(dens@estimate,alpha) ))
    count_n_interval80=count_n_interval80+contained
    plot(density(dens@x))
    max(dens@x)
    'plot(dens@x[,1], col=5+label, main=contained, cex=0.1)
    points(col=2,param,  cex=0.5, lwd=2)'
    'plot(dens@x[,c(1,3)], col=5+label, cex=0.1)
    points(col=2,param[1], param[3], cex=0.5, lwd=2)'
    
    #0.85
    alpha=0.15
    contained=(pred>=(quantile(dens@estimate,alpha)   ))
    label=(dens@estimate>=(quantile(dens@estimate,alpha) ))
    count_n_interval85=count_n_interval85+contained
    
    
    #interval 90%
    alpha=0.1 
    contained=(pred>=(quantile(dens@estimate,alpha)   ))
    label=(dens@estimate>(quantile(dens@estimate,alpha) ))
    count_n_interval90=count_n_interval90+contained
    
    
    #interval 95%
    alpha=0.05
    contained=(pred>=(quantile(dens@estimate,alpha)   ))
    label=(dens@estimate>(quantile(dens@estimate,alpha) ))
    count_n_interval95=count_n_interval95+contained
    
    cat("\n");
    
    cat(isim);print(" sim");
    cat(count_n_interval95/isim); cat(" ");
    cat(count_n_interval90/isim); cat(" ");
    cat(count_n_interval85/isim); cat(" ");
    cat(count_n_interval80/isim)
  }
}
